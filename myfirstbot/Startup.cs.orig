using System;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Bot.Builder;
using Microsoft.Bot.Builder.AI.Luis;
using Microsoft.Bot.Builder.Dialogs;
using Microsoft.Bot.Builder.Integration;
using Microsoft.Bot.Builder.Integration.AspNet.Core;
using Microsoft.Bot.Configuration;
using Microsoft.Bot.Connector.Authentication;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Options;
using CognitiveServices.Translator.Extension;
using System.Globalization;
using Microsoft.AspNetCore.Localization;
using CognitiveServices.Translator;
using CognitiveServices.Translator.Configuration;
using Microsoft.Bot.Builder.AI.QnA;
<<<<<<< HEAD:myfirstbot/Startup.cs
using Microsoft.Graph;
=======
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
>>>>>>> article19:Startup.cs

namespace myfirstbot
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            var secretKey = Configuration.GetSection("botFileSecret")?.Value;
            var botFilePath = Configuration.GetSection("botFilePath")?.Value;

            // 構成ファイルの読込み
            var botConfig = BotConfiguration.Load(botFilePath ?? @".\BotConfiguration.bot", secretKey);
            // 構成ファイルより LuisService を取得
            var luisService = (LuisService)botConfig.Services.Where(x => x.Type == "luis").First();
            // 構成情報より LuisApplication を作成
            var luisApp = new LuisApplication(luisService.AppId, luisService.AuthoringKey, luisService.GetEndpoint());
            var luisRecognizer = new LuisRecognizer(luisApp);
            services.AddSingleton<IRecognizer>(sp => luisRecognizer);
            services.AddSingleton(sp => botConfig ?? throw new InvalidOperationException($"The .bot config file could not be loaded. ({botConfig})"));

            services.AddBot<MyBot>(options =>
            {
                //options.Middleware.Add(new MyLoggingMiddleware());
                //options.Middleware.Add(new MyMiddleware());

                // Endpoint を構成ファイルより取得
                EndpointService endpointService = (EndpointService)botConfig.Services.Where(x => x.Type == "endpoint").First();
                // 認証として　AppId と AppPassword を使うように設定
                options.CredentialProvider = new SimpleCredentialProvider(endpointService.AppId, endpointService.AppPassword);

                // ストレージとしてインメモリを利用
                IStorage dataStore = new MemoryStorage();
                var userState = new UserState(dataStore);
                var conversationState = new ConversationState(dataStore);
                options.State.Add(userState);
                options.State.Add(conversationState);
                options.Middleware.Add(new SetLanguageMiddleware(
                    userState.CreateProperty<UserProfile>("UserProfile")));
            });

            // MSGraph 関連 を IoC に登録
            services.AddTransient<IGraphServiceClient>(sp => new GraphServiceClient(
                new DelegateAuthenticationProvider((request)=> { return Task.CompletedTask; })));
            services.AddTransient(sp => new MSGraphService(sp.GetRequiredService<IGraphServiceClient>()));

            // MyStateAccessors を IoC に登録
            services.AddSingleton(sp =>
            {
                // AddBot で登録した options を取得。
                var options = sp.GetRequiredService<IOptions<BotFrameworkOptions>>().Value;
                if (options == null)
                {
                    throw new InvalidOperationException("BotFrameworkOptions を事前に構成してください。");
                }
                var userState = options.State.OfType<UserState>().FirstOrDefault();
                if (userState == null)
                {
                    throw new InvalidOperationException("UserState を事前に定義してください。");
                }

                var conversationState = options.State.OfType<ConversationState>().FirstOrDefault();
                if (conversationState == null)
                {
                    throw new InvalidOperationException("ConversationState を事前に定義してください。");
                }

                var accessors = new MyStateAccessors(userState, conversationState)
                {
                    // DialogState を作成
                    ConversationDialogState = conversationState.CreateProperty<DialogState>("DialogState"),
                    // Events を作成
                    Events = conversationState.CreateProperty<IList<Microsoft.Graph.Event>>("Events"),
                    // UserProfile を作成
                    UserProfile = userState.CreateProperty<UserProfile>("UserProfile"),
                };

                return accessors;
            });

            // リソースファイルが存在するフォルダの相対パス
            services.AddLocalization(o => o.ResourcesPath = "Resources");
            //　ローカライゼーションの設定
            services.Configure<RequestLocalizationOptions>(options =>
            {
                var supportedCultures = new[]
                {
                    new CultureInfo("en-US"),
                    new CultureInfo("ja-JP"),
                };
                // 既定とサポートされるカルチャーの設定
                options.DefaultRequestCulture = new RequestCulture("ja-JP", "ja-JP");
                options.SupportedCultures = supportedCultures;
                options.SupportedUICultures = supportedCultures;
            });

            // 翻訳サービスを追加
            services.AddCognitiveServicesTranslator(Configuration);
            services.AddScoped<ITranslateClient, TranslateClient>();

            // ダイアログも IoC コンテナに登録
            services.AddScoped<LoginDialog, LoginDialog>();
            services.AddScoped<MenuDialog, MenuDialog>();
            services.AddScoped<PhotoUpdateDialog, PhotoUpdateDialog>();
            services.AddScoped<ProfileDialog, ProfileDialog>();
            services.AddScoped<ScheduleDialog, ScheduleDialog>();
            services.AddScoped<SelectLanguageDialog, SelectLanguageDialog>();
            services.AddScoped<WeatherDialog, WeatherDialog>();
            services.AddScoped<WelcomeDialog, WelcomeDialog>();
            services.AddScoped<QnADialog, QnADialog>();

            // 構成ファイルより QnAMakerService を取得
            var qnaMakerService = (QnAMakerService)botConfig.Services.Where(x => x.Type == "qna").First();
            var qnaEndpoint = new QnAMakerEndpoint()
            {
                KnowledgeBaseId = qnaMakerService.KbId,
                EndpointKey = qnaMakerService.EndpointKey,
                Host = qnaMakerService.Hostname,
            };
            var qnaMaker = new QnAMaker(qnaEndpoint);
            services.AddSingleton(sp => qnaMaker);
            // 通知を保持するデータベースをシングルトンとして追加
            services.AddSingleton(sp => new ScheduleNotificationStore());
            // MVC 有効化
            services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_2);
            // BotConfiguration を IoC に追加
            services.AddSingleton(sp => botConfig);
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IHostingEnvironment env)
        {
            app.UseBotFramework();
            app.UseMvc();
        }
    }
}